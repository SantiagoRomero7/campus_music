/**
 * TRANSACCI√ìN MongoDB: Inscribir estudiante en un curso
 * Objetivo: Realizar una operaci√≥n at√≥mica para garantizar que la inscripci√≥n
 * y la actualizaci√≥n de cupos se completen juntas o no se realicen en absoluto.
 */

// 1. INICIAR SESI√ìN DE TRANSACCI√ìN
// La sesi√≥n es necesaria para agrupar m√∫ltiples operaciones en una sola transacci√≥n.
const session = db.getMongo().startSession();

try {
    print("üöÄ INICIANDO TRANSACCI√ìN...");
    
    // 2. INICIAR TRANSACCI√ìN
    // Se inicia la transacci√≥n dentro de la sesi√≥n.
    // `readConcern`: `snapshot` asegura que todas las lecturas dentro de la transacci√≥n vean los mismos datos,
    // incluso si otros procesos est√°n escribiendo en las colecciones.
    // `writeConcern`: `majority` garantiza que la operaci√≥n solo se considere exitosa
    // cuando ha sido escrita en la mayor√≠a de los nodos del replica set.
    session.startTransaction({
        readConcern: { level: "snapshot" },
        writeConcern: { w: "majority" }
    });

    // DATOS PARA LA INSCRIPCI√ìN (usando datos existentes en tu DB)
    const estudianteId = "E1";    // Andr√©s Castillo - EXISTE
    const cursoId = "C1";         // Guitarra Principiante - EXISTE con cupos
    const sedeId = "S1";          // Bogot√° - EXISTE
    const profesorId = "P1";      // Carlos Rodr√≠guez - EXISTE
    const costo = 800000;

    print(`üìã Inscribiendo estudiante ${estudianteId} en curso ${cursoId}...`);

    // 3. VERIFICAR QUE EL CURSO EXISTE Y TIENE CUPOS
    // Se lee el documento del curso dentro de la transacci√≥n, usando el par√°metro `session`.
    print("üîç Verificando curso y cupos disponibles...");
    const curso = db.cursos.findOne(
        { id_curso: cursoId },
        { session: session }
    );

    if (!curso) {
        throw new Error(`El curso ${cursoId} no existe`);
    }

    if (curso.CuposDisponibles <= 0) {
        throw new Error(`El curso ${cursoId} no tiene cupos disponibles`);
    }
    print(`‚úÖ Curso validado: ${curso.id_curso} - Cupos: ${curso.CuposDisponibles}`);

    // 4. VERIFICAR QUE EL ESTUDIANTE EXISTE
    // Se lee el documento del estudiante para confirmar su existencia, tambi√©n dentro de la sesi√≥n.
    print("üîç Verificando estudiante...");
    const estudiante = db.estudiantes.findOne(
        { id_estudiante: estudianteId },
        { session: session }
    );

    if (!estudiante) {
        throw new Error(`El estudiante ${estudianteId} no existe`);
    }
    print(`‚úÖ Estudiante validado: ${estudiante.Nombre}`);

    // 5. GENERAR NUEVO ID DE INSCRIPCI√ìN
    // Se genera un nuevo ID de forma program√°tica. Esta operaci√≥n no afecta las colecciones
    // y se puede realizar fuera de la transacci√≥n, pero se incluye aqu√≠ para la completitud del script.
    print("üî¢ Generando ID de inscripci√≥n...");
    const ultimaInscripcion = db.inscripciones.find()
        .sort({ id_inscripcion: -1 })
        .limit(1)
        .toArray();
    
    const nuevoNumero = ultimaInscripcion.length > 0 ? 
        parseInt(ultimaInscripcion[0].id_inscripcion.substring(1)) + 1 : 31;
    const idInscripcion = "I" + nuevoNumero;
    print(`‚úÖ Nuevo ID generado: ${idInscripcion}`);

    // 6. INSERTAR DOCUMENTO EN INSCRIPCIONES (OPERACI√ìN 1)
    // Se inserta la nueva inscripci√≥n. Si esta operaci√≥n falla, la transacci√≥n entera fallar√° y se har√° un rollback.
    print("üìù Insertando inscripci√≥n...");
    const resultadoInscripcion = db.inscripciones.insertOne({
        id_inscripcion: idInscripcion,
        Estudiante: estudianteId,
        Curso: cursoId,
        Sede: sedeId,
        Profesor: profesorId,
        Costo: costo,
        Fecha: new Date()
    }, { session: session });

    if (resultadoInscripcion.insertedCount !== 1) {
        throw new Error("Error al insertar la inscripci√≥n");
    }
    print("‚úÖ Inscripci√≥n creada exitosamente");

    // 7. DECREMENTAR CUPOS_DISPONIBLES EN CURSOS (OPERACI√ìN 2)
    // Se decrementa el contador de cupos. Esta es una operaci√≥n de escritura dentro de la transacci√≥n.
    print("‚ûñ Decrementando cupos disponibles...");
    const resultadoCupos = db.cursos.updateOne(
        { id_curso: cursoId },
        { $inc: { CuposDisponibles: -1 } },
        { session: session }
    );

    if (resultadoCupos.modifiedCount !== 1) {
        throw new Error("Error al actualizar cupos del curso");
    }
    print("‚úÖ Cupos decrementados exitosamente");

    // 8. ACTUALIZAR ESTUDIANTE (OPERACI√ìN 3 - OPCIONAL PERO COMPLETA LA TRANSACCI√ìN)
    // Se agrega el curso a la lista de cursos inscritos del estudiante.
    print("üîÑ Actualizando cursos del estudiante...");
    const resultadoEstudiante = db.estudiantes.updateOne(
        { id_estudiante: estudianteId },
        { $addToSet: { CursosInscritos: cursoId } },
        { session: session }
    );

    if (resultadoEstudiante.modifiedCount !== 1) {
        throw new Error("Error al actualizar cursos del estudiante");
    }
    print("‚úÖ Estudiante actualizado exitosamente");

    // 9. COMMIT DE LA TRANSACCI√ìN (CONFIRMAR TODAS LAS OPERACIONES)
    // Si todas las operaciones anteriores fueron exitosas, se confirman los cambios en la base de datos.
    print("‚úÖ Realizando commit de la transacci√≥n...");
    session.commitTransaction();
    
    print("üéâ TRANSACCI√ìN COMPLETADA EXITOSAMENTE!");
    print(`üìä Inscripci√≥n creada: ${idInscripcion}`);
    print(`üìä Cupos restantes: ${curso.CuposDisponibles - 1}`);

} catch (error) {
    // 10. ABORTAR TRANSACCI√ìN (ROLLBACK) EN CASO DE ERROR
    // En caso de que cualquier operaci√≥n falle, se revierten todos los cambios
    // realizados dentro de la transacci√≥n, manteniendo la consistencia de los datos.
    print(`‚ùå ERROR: ${error.message}`);
    print("üîÑ Realizando rollback...");
    
    session.abortTransaction();
    
    print("üìä Transacci√≥n revertida. La base de datos se mantiene consistente.");
    
} finally {
    // 11. CERRAR SESI√ìN (SIEMPRE SE DEBE HACER)
    // La sesi√≥n debe ser terminada al final, sin importar si la transacci√≥n tuvo √©xito o fall√≥.
    session.endSession();
    print("üîö Sesi√≥n de transacci√≥n cerrada.");
}

// 12. VERIFICACI√ìN POST-TRANSACCI√ìN
// Esta secci√≥n es para fines de demostraci√≥n y no forma parte de la transacci√≥n en s√≠.
print("\n=== VERIFICACI√ìN FINAL ===");

// Verificar inscripci√≥n creada
const inscripcionCreada = db.inscripciones.findOne({ id_inscripcion: "I31" });
print("üìã Inscripci√≥n creada:");
printjson(inscripcionCreada);

// Verificar cupos actualizados
const cursoActualizado = db.cursos.findOne(
    { id_curso: "C1" }, 
    { id_curso: 1, Cupo: 1, CuposDisponibles: 1 }
);
print("üìä Estado del curso:");
printjson(cursoActualizado);

// Verificar estudiante actualizado
const estudianteActualizado = db.estudiantes.findOne(
    { id_estudiante: "E1" }, 
    { id_estudiante: 1, Nombre: 1, CursosInscritos: 1 }
);
print("üë®‚Äçüéì Cursos del estudiante:");
printjson(estudianteActualizado);

print("\n‚úÖ Script de transacciones completado!");